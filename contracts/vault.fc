#include "include/stdlib.fc";
#include "include/message.fc";
#include "include/const.fc";

;; ------------------------------------------------------------------------------------------------
;; storage variables

const storage_bits = 303;
const storage_cells = 1;

;; load_data populates storage variables using stored data
(int {-deposit-}, slice {-owner-}) load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    var out = (ds~load_coins(), ds~load_msg_addr());
    ds.end_parse();
    return out;
}

;; ------------------------------------------------------------------------------------------------
;; computation
int action_fee(int workchain) impure inline_ref {
    int compute_gas = vault_compute_gas + escrow_compute_gas;
    return fee(workchain, compute_gas, storage_bits, storage_cells, action_forward_bits, action_forward_cells);
}

() recv_internal(int balance, cell in_msg, slice body) impure inline {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_msg_flags();
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice actor = cs~load_msg_addr();
    (int deposit, slice owner) = load_data();
    if (body.slice_bits() < MSG_OP_SIZE) {
        (int workchain, _) = parse_std_addr(my_address());
        if (balance >= (deposit + action_fee(workchain))) {
            raw_reserve(deposit, RESERVE_REGULAR);
            return change(owner, action::deposit, 0, actor);
        }
        return change(actor, action::send, 0, reason::nothing);
    }
    int op = body~load_op();
    int query_id = body~load_query_id();
    if ((op == action::claim) & equal_slices_bits(actor, owner)) {
        slice recipient = body~load_msg_addr();
        return change(recipient, action::send, query_id, recipient);
    }
    return change(actor, action::send, query_id, reason::nothing);
}

;; ------------------------------------------------------------------------------------------------
;; get methods
(int, slice) get_state() method_id {
    return load_data();
}

(int) get_action_fee(int workchain) method_id {
    return action_fee(workchain);
}
