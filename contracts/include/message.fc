#include "stdlib.fc";

const min_storage_duration = 60; ;; 60 sec
int fee(int workchain, int compute_gas, int storage_bits, int storage_cells, int forward_bits, int forward_cells) impure inline {
    int compute_fee = get_compute_fee(workchain, compute_gas);
    int storage_fee = my_storage_due() + get_storage_fee(workchain, min_storage_duration, storage_bits, storage_cells);
    int fwd_fee = get_forward_fee(workchain, forward_bits, forward_cells);
    return compute_fee + storage_fee + fwd_fee;
}

;; https://docs.ton.org/v3/documentation/smart-contracts/message-management/sending-messages#message-layout
builder int_message_info(int flags, slice dest, int grams) inline {
    return begin_cell()
        .store_msg_flags_and_address_none(flags)
        .store_slice(dest)
        .store_coins(grams)
        .store_prefix_only_body();
}

builder int_message(int flags, slice dest, int grams, int action, int query_id) inline {
    return int_message_info(flags, dest, grams).store_op(action).store_query_id(query_id);
}

() change(slice dest, int action, int query_id, slice body) impure inline {
    builder message = int_message(NON_BOUNCEABLE, dest, 0, action, query_id);
    return send_raw_message(message.store_slice(body).end_cell(), SEND_MODE_CARRY_ALL_BALANCE);
}
